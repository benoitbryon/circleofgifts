#############
circleofgifts
#############

Small application to deal roles in a game.


*****
Story
*****

This application was created to manage gifts offered at a party:

* guests are players
* every player is a "hunter": he is affected a "target" (another guest)
* reciprocally, every player is a target: he is hunted by someone else
* chained targets form a ring.
* every hunter brings a present to his target.

.. note::

   Similar distribution can be used in `killer-like games
   <http://en.wikipedia.org/wiki/Assassin_%28game%29>`_

The deal takes care of additional rules such as:

* the deal is randomly generated
* a player can't hunt someone in his team (wife, husband, brother... or
  whatever you consider a team)

If deal is repeated (multiple turns), then additional rules are applied:

* one shouldn't have the same target again (no repetition)
* one shouldn't hunt a person he was hunted by (limit revenges)
* ... and other more or less complicated rules to promote changes.


*******
Example
*******

At a party, here the list of guests:

* Peter and Paula
* Patrick and Joe
* Mark
* Steve and Sandra

After a random distribution, we can obtain the following ring:

::

  -> Peter -> Joe -> Sandra -> Mark -> Paula -> Steve -> Patrick -> Peter

Which means Peter gives to Joe, Joe to Sandra... and Patrick to Peter.

Next turn, a team joins the game, but Mark leaves. Here are players:

* Peter and Paula
* Patrick and Joe
* Steve and Sandra
* Roger and Gary

Here is a valid random new distribution:

::

  -> Peter -> Steve -> Paula -> Roger -> Patrick -> Gary -> Sandra -> Joe -> Peter


************
Known issues
************

* Greedy! Almost all combinations are generated to get the best result against
  "promote change" rules. Some optimizations are implemented, but it may be
  possible to improve!

* History-related rules are not efficient with very small amount of players or
  teams. Typical usage is >6 teams and >12 players.

* Teams of more than 2 players are currently not supported.


*****
Usage
*****

.. note::

  If you just want to try this application, you can:

  * follow the testing procedure to install a copy of this project;
  * run "bin/bpython" in a shell;
  * then type the following commands in the bpython shell.

::

  from marmelune.games.circularroledealer.dealer import CircularDealer

  players = [['Andrew'],
             ['Balthazar', 'Beyonce'],
             ['Clothilde', 'Cassius'],
             ['Dan'],
             ['Eleanor', 'Esmeralda'],
             ['Frida', 'Frank'],
            ]
  dealer = CircularDealer(players)
  dealer.deal()
  dealer.deal()
  dealer.deal()
  dealer.history

Another sample script that you can run with bin/python sample.py

::

  # Save this as sample.py
  from marmelune.games.circularroledealer import dealer


  players = [['Pedro', 'Simone'],
             ['Louis', 'Paulette'],
             ['Marcel', 'Chuck'],
             ['Regine', 'Paul'],
             ['Sullivan', 'Clara'],
             ['Maria', 'Thomas'],
            ]

  d = dealer.CircularDealer(players)

  # 1st round.
  d.history.append(['Simone', 'Paulette', 'Paul', 'Sullivan', 'Maria',
                    'Chuck', 'Pedro', 'Regine', 'Louis', 'Marcel', 'Clara'])
  # 2nd round.
  d.history.append(['Simone', 'Sullivan', 'Paulette', 'Regine', 'Marcel',
                    'Maria', 'Pedro', 'Clara', 'Chuck', 'Paul', 'Louis'])
  # 3rd round. Notice that Thomas was not present in previous rounds.
  d.history.append(['Clara', 'Regine', 'Maria', 'Simone', 'Chuck', 'Louis',
                    'Sullivan', 'Pedro', 'Paulette', 'Thomas', 'Marcel',
                    'Paul'])
  # Next!
  print d.deal_with_respect_to_history()


Testing
=======

::

  # Download project
  git clone https://github.com/Sullivanbryon/marmelune.games.circularroledealer
  cd marmelune.games.circularroledealer
  # Bootstrap
  bin/bootstrap
  # Deploy
  bin/buildout -N
  # Run tests
  bin/nosetests --with-doctest --rednose src/marmelune/games/circularroledealer/
